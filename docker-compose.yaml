services:
  backend:
    build:
      context: .
      dockerfile: backend_helper_course/configs/django/Dockerfile
    container_name: django_app
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
      - keycloak
#      - logstash
#      - kibana
    command: >-
      sh -c "cd /app/backend_helper_course &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn helper.asgi:application
      -k uvicorn.workers.UvicornWorker
      -b 0.0.0.0:8000 --workers 4"

  web:
    build:
      context: .
      dockerfile: backend_helper_course/configs/frontend/Dockerfile
    container_name: react_builder
    command:
      - sh
      - -c
      - |
        npm ci \
         && npm run build \
         && cp -r dist/* /var/www/hobbymate/static/
    volumes:
      - frontend_static:/var/www/hobbymate/static

  db:
    build:
      context: .
      dockerfile: backend_helper_course/configs/db/Dockerfile
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: DjangoServer
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend_helper_course/init-postgis.sh:/docker-entrypoint-initdb.d/init-postgis.sh:ro

  keycloak:
    build:
      context: .
      dockerfile: backend_helper_course/configs/keycloak/Dockerfile
    container_name: keycloak
#   env_file:
#     - .env.keycloak
    environment:
      KEYCLOAK_ADMIN: admin_key
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HTTP_RELATIVE_PATH: /keycloak
    ports:
      - "8080:8080"
    volumes:
      - ./keycloak-import:/opt/keycloak/data/import
      - keycloak_data:/opt/keycloak/data
  redis:
    image: redis:latest
    container_name: redis_server
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
  celery:
    build:
      context: .
      dockerfile: backend_helper_course/configs/django/Dockerfile
    working_dir: /app/backend_helper_course
    volumes:
      - .:/app
    command: celery -A helper.celery worker --loglevel=info
    depends_on: [backend]

  celery-beat:
    build:
      context: .
      dockerfile: backend_helper_course/configs/django/Dockerfile
    working_dir: /app/backend_helper_course
    volumes:
      - .:/app
    command: celery -A helper.celery beat --loglevel=info
    depends_on: [backend]

#  elasticsearch:
#    image: elasticsearch:8.13.0
#    environment:
#      - discovery.type=single-node
#      - xpack.security.enabled=false
#      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#    ports: ["9200:9200"]
#
#  kibana:
#    image: kibana:8.13.0
#    depends_on: [elasticsearch]
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#      - xpack.security.enabled=false
#    ports: ["5601:5601"]
#  logstash:
#    image: docker.elastic.co/logstash/logstash:8.13.0
#    volumes:
#      - ./backend_helper_course/configs/logstash/:/usr/share/logstash/pipeline:ro
#    ports: ["5959:5959"]
#    depends_on: [elasticsearch]
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports: ["80:80", "443:443"]
    volumes:
      - /etc/nginx/sites-available/hobbymate.ru:/etc/nginx/conf.d/hobbymate.ru.conf:ro
      - /etc/nginx/ssl/hobbymate.ru:/etc/nginx/ssl/hobbymate.ru:ro
      - frontend_static:/var/www/hobbymate/static
      - /home/ubuntu/hobbymate/logs/nginx:/var/log/nginx:rw
    depends_on: [backend, keycloak]
volumes:
  pgdata:
  redisdata:
  keycloak_data:
  frontend_static:
