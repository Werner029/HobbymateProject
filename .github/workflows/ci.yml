name: CI

"on":
  push:
    branches:
      - main
      - Developer
      - Testing
      - Tree
  pull_request:
    branches:
      - "**"

permissions:
  contents: read

concurrency:
  group: ${{ format('{0}-{1}', github.workflow, github.head_ref || github.ref_name) }}
  cancel-in-progress: true

jobs:
  python-tests:
    permissions:
      contents: write
    name: Pytest
    runs-on: ubuntu-latest
    services:
      postgres:
        image: garapadev/postgres-postgis-pgvector:latest
        env:
          POSTGRES_DB: DjangoServer
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U postgres -d DjangoServer"
          --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:latest
        ports: ["6379:6379"]
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=5

    env:
      POSTGRES_HOST: 127.0.0.1
      POSTGRES_PORT: "5432"
      POSTGRES_DB: DjangoServer
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: "6379"
      REDIS_PASSWORD: ""
      DJANGO_SETTINGS_MODULE: helper.settings
      APM_SECRET_TOKEN: ${{ secrets.APM_SECRET_TOKEN }}
      DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
      PYTHONIOENCODING: utf-8
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements/*.txt

      - name: Install deps
        run: |
          pip install -r requirements/dev.txt
          pip install -r requirements/test.txt
          sudo apt-get update && sudo apt-get install -y postgresql-client netcat-openbsd
          sudo apt-get install -y --no-install-recommends \
          gdal-bin libgdal-dev \
          libgeos-dev geos-bin \
          proj-bin libproj-dev \

      - name: Wait for Postgres & Redis
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U "$POSTGRES_USER"; do sleep 1; done
          until (echo PING | nc -w 1 127.0.0.1 6379 | grep -q PONG); do sleep 1; done

      - name: Enable PostGIS & pgvector & create test_db
        run: |
          psql "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB" \
            -v ON_ERROR_STOP=1 <<'SQL'
          CREATE DATABASE template_test WITH TEMPLATE template1;
          \c template_test
          CREATE EXTENSION IF NOT EXISTS postgis;
          CREATE EXTENSION IF NOT EXISTS vector;
          SQL

      - name: Apply Migrations
        run: |
          cd backend_helper_course
          python3 manage.py migrate

      - name: Run pytest & coverage
        run: |
          cd backend_helper_course
          pytest -q --cov --cov-fail-under=85 --cov-report html

      - name: Commit coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd backend_helper_course
          rm -f coverage.svg
          coverage-badge -o coverage.svg
          git config --global user.name "Github Action"
          git config --global user.email "action@github.com"
          git add coverage.svg
          git commit -m "Update coverage badge" || true
          git push || true

      - name: OpenApi check
        run: |
          cd backend_helper_course
          python manage.py spectacular --file docs/_openapi_tmp.yaml
          diff -u docs/openapi.yaml docs/_openapi_tmp.yaml

  python-linters:
    name: Black, Isort, Flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements/*.txt

      - name: Install deps
        run: |
          pip install -r requirements/dev.txt
          pip install -r requirements/test.txt
      - name: Black
        run: |
          cd backend_helper_course
          black --check .
      - name: Isort
        run: |
          cd backend_helper_course
          isort -c .
      - name: Flake8
        run: |
          cd backend_helper_course
          flake8 --config=.flake8 --verbose --exclude=migrations,*/migrations/*,asgi.py .


  frontend-linters:
    name: Frontend linters (ESLint & Prettier)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend_helper_course
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend_helper_course/package-lock.json
      - name: Install deps
        run: npm ci
      - name: ESLint
        run: npx eslint . --max-warnings=0
      - name: Prettier
        run: npx prettier . --check
  dockerfiles:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: hadolint/hadolint-action@v3.3.0
        with:
          recursive: true
          pattern: "**/Dockerfile*"
          failure-threshold: error

  yamls_and_compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          python -m pip install --user yamllint

      - name: yamllint
        run: ~/.local/bin/yamllint -c .yamllint.yaml .

      - name: docker compose validate default
        run: docker compose -f docker-compose.yaml config -q
      - name: JSON lint (jq)
        run: |
          set -e
          find . -type f -name "*.json" -not -path "./node_modules/*" -print0 | xargs -0 -I{} sh -c 'jq -e . "{}" >/dev/null'

  secret-scan:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
        with: {fetch-depth: 0}
      - uses: gitleaks/gitleaks-action@v2
